package com.example.jasper_report_app.util;

import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;

import java.io.IOException;
//import java.nio.file.Files;
//import java.nio.file.Path;
import java.awt.Font;
import java.awt.FontFormatException;

@Component
public class FontManager {
    
    private static boolean fontsRegistered = false;
    
    public synchronized void registerFonts() {
        if (fontsRegistered) {
            return;
        }
        
        try {
            // ƒêƒÉng k√Ω font v·ªõi h·ªá th·ªëng
            registerSystemFont();
            
            // Ki·ªÉm tra font c√≥ s·∫µn trong JasperReports
            checkJasperReportsFont();
            
            fontsRegistered = true;
            System.out.println("‚úÖ Font ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω th√†nh c√¥ng!");
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói ƒëƒÉng k√Ω font: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void registerSystemFont() throws IOException, FontFormatException {
        ClassPathResource fontResource = new ClassPathResource("fonts/ARIALUNI.TTF");
        
        if (!fontResource.exists()) {
            throw new IOException("Font file kh√¥ng t·ªìn t·∫°i: fonts/ARIALUNI.TTF");
        }
        
        // ƒêƒÉng k√Ω v·ªõi Java AWT
        Font customFont = Font.createFont(Font.TRUETYPE_FONT, fontResource.getInputStream());
        java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().registerFont(customFont);
        
        System.out.println("üìù Font family name: " + customFont.getFamily());
        System.out.println("üìù Font name: " + customFont.getName());
    }
    
    private void checkJasperReportsFont() {
        try {
            // Ki·ªÉm tra font c√≥ s·∫µn trong JasperReports
            System.out.println("üîç Ki·ªÉm tra font trong JasperReports...");
            
            // List available font families
            System.out.println("üìã Font families c√≥ s·∫µn trong JasperReports:");
            // Note: JasperReports s·∫Ω t·ª± ƒë·ªông load t·ª´ extension
            
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è C·∫£nh b√°o khi ki·ªÉm tra JasperReports font: " + e.getMessage());
        }
    }
    
    public boolean isFontAvailable(String fontName) {
        java.awt.GraphicsEnvironment ge = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontNames = ge.getAvailableFontFamilyNames();
        
        for (String name : fontNames) {
            if (name.equalsIgnoreCase(fontName)) {
                return true;
            }
        }
        return false;
    }
    
    public void listAvailableFonts() {
        java.awt.GraphicsEnvironment ge = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontNames = ge.getAvailableFontFamilyNames();
        
        System.out.println("üìã Font families c√≥ s·∫µn:");
        for (String name : fontNames) {
            if (name.toLowerCase().contains("arial") || 
                name.toLowerCase().contains("unicode") ||
                name.toLowerCase().contains("noto")) {
                System.out.println("  ‚úì " + name);
            }
        }
    }
}