package com.example.jasper_report_app.util;

import org.springframework.stereotype.Component;

import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.util.*;

@Component
public class FontManager {
    
    private static boolean fontsRegistered = false;
    
    public synchronized void registerFonts() {
        if (fontsRegistered) {
            System.out.println("‚ÑπÔ∏è Fonts ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥");
            return;
        }
        
        try {
            System.out.println("üîß Ki·ªÉm tra fonts h·ªá th·ªëng cho ƒëa ng√¥n ng·ªØ...");
            
            // Ki·ªÉm tra fonts c√≥ s·∫µn cho ti·∫øng Vi·ªát v√† ti·∫øng Hoa
            checkSystemFonts();
            
            fontsRegistered = true;
            System.out.println("‚úÖ Ho√†n th√†nh ki·ªÉm tra fonts!");
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói ki·ªÉm tra fonts: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void checkSystemFonts() {
        System.out.println("üîç Ki·ªÉm tra fonts h·ªá th·ªëng h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ...");
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontFamilies = ge.getAvailableFontFamilyNames();
        Set<String> systemFontSet = new HashSet<>(Arrays.asList(fontFamilies));
        
        // Fonts ∆∞u ti√™n cho ti·∫øng Vi·ªát v√† ti·∫øng Hoa
        String[] priorityFonts = {
            "Arial Unicode MS",
            "DejaVu Sans",
            "DejaVu Serif", 
            "Liberation Sans",
            "Noto Sans CJK TC",
            "SansSerif"
        };
        
        System.out.println("üìã Fonts ∆∞u ti√™n cho ƒëa ng√¥n ng·ªØ:");
        String bestFont = null;
        
        for (String fontName : priorityFonts) {
            boolean available = systemFontSet.contains(fontName);
            System.out.println("   " + (available ? "‚úÖ" : "‚ùå") + " " + fontName);
            
            if (available && bestFont == null) {
                // Test font v·ªõi ti·∫øng Vi·ªát v√† ti·∫øng Hoa
                if (testMultiLanguageSupport(fontName)) {
                    bestFont = fontName;
                }
            }
        }
        
        if (bestFont != null) {
            System.out.println("üéØ Font khuy·∫øn ngh·ªã: " + bestFont);
        } else {
            System.out.println("‚ö†Ô∏è S·ª≠ d·ª•ng fallback: SansSerif");
        }
        
        // Test fonts h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß
        testAvailableFonts();
    }
    
    private boolean testMultiLanguageSupport(String fontName) {
        try {
            Font font = new Font(fontName, Font.PLAIN, 12);
            
            // Test strings
            String vietnamese = "Ti·∫øng Vi·ªát: √†√°·∫°·∫£√£ƒÉ·∫Ø·∫±·∫∑·∫≥·∫µ√¢·∫•·∫ß·∫≠·∫©·∫´ √®√©·∫π·∫ª·∫Ω√™·∫ø·ªÅ·ªá·ªÉ·ªÖ";
            String chinese = "‰∏≠Êñá: ‰Ω†Â•Ω‰∏ñÁïå ÂåÖÂ≠êÂíåÂ∞èÈõû ÁÆÄ‰Ωì‰∏≠Êñá ÁπÅÈ´î‰∏≠Êñá";
            String english = "English: Hello World ABC xyz 123";
            
            boolean supportsVietnamese = font.canDisplayUpTo(vietnamese) == -1;
            boolean supportsChinese = font.canDisplayUpTo(chinese) == -1;
            boolean supportsEnglish = font.canDisplayUpTo(english) == -1;
            
            System.out.println("     üáªüá≥ Ti·∫øng Vi·ªát: " + (supportsVietnamese ? "‚úÖ" : "‚ùå"));
            System.out.println("     üá®üá≥ ‰∏≠Êñá: " + (supportsChinese ? "‚úÖ" : "‚ùå"));
            System.out.println("     üá∫üá∏ English: " + (supportsEnglish ? "‚úÖ" : "‚ùå"));
            
            return supportsVietnamese && supportsEnglish; // √çt nh·∫•t ph·∫£i h·ªó tr·ª£ ti·∫øng Vi·ªát
            
        } catch (Exception e) {
            return false;
        }
    }
    
    private void testAvailableFonts() {
        System.out.println("\nüß™ Test fonts h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ:");
        
        String[] testFonts = {
            "Arial Unicode MS",
            "DejaVu Sans", 
            "DejaVu Serif",
            "Liberation Sans",
            "SansSerif"
        };
        
        String testText = "Hello Xin ch√†o ‰Ω†Â•Ω‰∏ñÁïå „Åì„Çì„Å´„Å°„ÅØ ÏïàÎÖïÌïòÏÑ∏Ïöî";
        
        for (String fontName : testFonts) {
            if (isFontAvailable(fontName)) {
                try {
                    Font font = new Font(fontName, Font.PLAIN, 12);
                    boolean fullySupported = font.canDisplayUpTo(testText) == -1;
                    System.out.println("   " + (fullySupported ? "‚úÖ" : "‚ö†Ô∏è") + " " + fontName + 
                                     (fullySupported ? " - HO√ÄN H·∫¢O" : " - M·ªòT PH·∫¶N"));
                } catch (Exception e) {
                    System.out.println("   ‚ùå " + fontName + " - L·ªñI");
                }
            }
        }
    }
    
    public boolean isFontAvailable(String fontName) {
        if (fontName == null || fontName.trim().isEmpty()) {
            return false;
        }
        
        try {
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            String[] fontNames = ge.getAvailableFontFamilyNames();
            
            for (String name : fontNames) {
                if (name.equalsIgnoreCase(fontName.trim())) {
                    return true;
                }
            }
            return false;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói ki·ªÉm tra font '" + fontName + "': " + e.getMessage());
            return false;
        }
    }
    
    public String getBestAvailableFont() {
        // Th·ª© t·ª± ∆∞u ti√™n d·ª±a tr√™n fonts c√≥ s·∫µn
        String[] preferredFonts = {
            "Arial Unicode MS",
            "DejaVu Sans",
            "Liberation Sans", 
            "SansSerif"
        };
        
        for (String font : preferredFonts) {
            if (isFontAvailable(font)) {
                System.out.println("üéØ Ch·ªçn font t·ªët nh·∫•t: " + font);
                return font;
            }
        }
        
        System.out.println("‚ö†Ô∏è S·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh: Dialog");
        return "Dialog";
    }
    
    public void listAvailableFonts() {
        System.out.println("=== FONTS H·ªñ TR·ª¢ ƒêA NG√îN NG·ªÆ ===");
        
        try {
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            String[] fontFamilies = ge.getAvailableFontFamilyNames();
            
            System.out.println("üìä T·ªïng s·ªë fonts: " + fontFamilies.length);
            
            // Fonts Unicode/ƒëa ng√¥n ng·ªØ
            System.out.println("\nüìã Fonts h·ªó tr·ª£ Unicode/ƒëa ng√¥n ng·ªØ:");
            Arrays.stream(fontFamilies)
                  .filter(font -> font.toLowerCase().contains("unicode") ||
                                font.toLowerCase().contains("dejavu") ||
                                font.toLowerCase().contains("liberation") ||
                                font.toLowerCase().contains("noto") ||
                                font.toLowerCase().contains("arial"))
                  .sorted()
                  .forEach(font -> {
                      String testText = "Vi·ªát‰∏≠Êñá";
                      try {
                          Font f = new Font(font, Font.PLAIN, 12);
                          boolean supports = f.canDisplayUpTo(testText) == -1;
                          System.out.println("  " + (supports ? "‚úÖ" : "‚ö†Ô∏è") + " " + font);
                      } catch (Exception e) {
                          System.out.println("  ‚ùå " + font);
                      }
                  });
                  
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói li·ªát k√™ fonts: " + e.getMessage());
        }
    }
    
    public List<String> getAvailableFonts() {
        try {
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            String[] fontNames = ge.getAvailableFontFamilyNames();
            return Arrays.asList(fontNames);
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói l·∫•y danh s√°ch fonts: " + e.getMessage());
            return new ArrayList<>();
        }
    }
    
    public boolean testVietnameseSupport(String fontName) {
        if (!isFontAvailable(fontName)) {
            return false;
        }
        
        String vietnameseText = "Ti·∫øng Vi·ªát: √†√°·∫°·∫£√£ƒÉ·∫Ø·∫±·∫∑·∫≥·∫µ√¢·∫•·∫ß·∫≠·∫©·∫´ √®√©·∫π·∫ª·∫Ω√™·∫ø·ªÅ·ªá·ªÉ·ªÖ";
        
        try {
            Font font = new Font(fontName, Font.PLAIN, 12);
            return font.canDisplayUpTo(vietnameseText) == -1;
            
        } catch (Exception e) {
            return false;
        }
    }
}